@using AutoWeb.Client
@inject IAutoHostClient AutoHostClient
@inject IJSRuntime JS

<div class="bg-gray-800 rounded-lg p-6">
    <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-semibold text-white">API Keys</h3>
        <button @onclick="ShowAddKey"
                class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-500 transition-colors font-medium">
            + Add API Key
        </button>
    </div>

    @if (isAddingKey)
    {
        <div class="bg-gray-700 p-4 rounded-lg mb-4">
            <div class="space-y-3">
                <div>
                    <label class="block text-sm font-medium text-gray-300 mb-1">Service</label>
                    <input @bind="newKeyService"
                           placeholder="e.g., OpenRouter"
                           class="w-full p-2 bg-gray-600 text-white rounded border border-gray-500 focus:border-green-400 focus:outline-none" />
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-300 mb-1">Description</label>
                    <input @bind="newKeyDescription"
                           placeholder="e.g., Production API Key"
                           class="w-full p-2 bg-gray-600 text-white rounded border border-gray-500 focus:border-green-400 focus:outline-none" />
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-300 mb-1">API Key</label>
                    <input @bind="newKeyValue"
                           type="password"
                           placeholder="sk-..."
                           class="w-full p-2 bg-gray-600 text-white rounded border border-gray-500 focus:border-green-400 focus:outline-none" />
                </div>
                <div class="flex gap-2 mt-4">
                    <button @onclick="SaveNewKey"
                            disabled="@(isSaving || string.IsNullOrWhiteSpace(newKeyValue))"
                            class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-500 transition-colors disabled:bg-gray-500">
                        @(isSaving ? "Saving..." : "Save")
                    </button>
                    <button @onclick="CancelAddKey"
                            class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-500 transition-colors">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    }

    @if (apiKeys.Count == 0)
    {
        <p class="text-gray-400">No API keys configured.</p>
    }
    else
    {
        <div class="space-y-2">
            @foreach (var apiKey in apiKeys)
            {
                <div class="bg-gray-700 p-3 rounded flex justify-between items-center">
                    <div class="flex-1">
                        <div class="flex items-center gap-3">
                            <span class="text-white font-medium">@apiKey.Service</span>
                            <span class="text-gray-400 text-sm">@apiKey.Description</span>
                        </div>
                        <div class="text-sm text-gray-400 mt-1">
                            Created @apiKey.CreatedAt.ToString("MMM d, yyyy")
                            @if (apiKey.LastUsedAt.HasValue)
                            {
                                <span> â€¢ Last used @GetRelativeTime(apiKey.LastUsedAt.Value)</span>
                            }
                        </div>
                    </div>
                    <div class="flex items-center gap-2 ml-4">
                        @if (showingKeyId == apiKey.Id)
                        {
                            <div class="text-sm font-mono bg-gray-600 px-2 py-1 rounded">
                                @apiKey.Value
                            </div>
                        }
                        <button @onclick="() => ToggleShowKey(apiKey.Id)"
                                class="px-3 py-1.5 text-sm bg-gray-600 text-white rounded hover:bg-gray-500 transition-colors">
                            @(showingKeyId == apiKey.Id ? "Hide" : "Show")
                        </button>
                        <button @onclick="() => DeleteKey(apiKey.Id)"
                                disabled="@(deletingKeyId == apiKey.Id)"
                                class="px-3 py-1.5 text-sm bg-red-600 text-white rounded hover:bg-red-500 transition-colors disabled:bg-gray-500">
                            @(deletingKeyId == apiKey.Id ? "Deleting..." : "Delete")
                        </button>
                    </div>
                </div>
            }
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="mt-4 p-3 bg-red-900 bg-opacity-50 border border-red-500 rounded">
            <p class="text-sm text-red-200">@errorMessage</p>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="mt-4 p-3 bg-green-900 bg-opacity-50 border border-green-500 rounded">
            <p class="text-sm text-green-200">@successMessage</p>
        </div>
    }
</div>

@code {
    private class ApiKeyInfo
    {
        public int Id { get; set; }
        public string Service { get; set; } = "";
        public string Description { get; set; } = "";
        public string Value { get; set; } = "";
        public DateTime CreatedAt { get; set; }
        public DateTime? LastUsedAt { get; set; }
    }

    private List<ApiKeyInfo> apiKeys = new();
    private bool isAddingKey = false;
    private string newKeyService = "OpenRouter";
    private string newKeyDescription = "";
    private string newKeyValue = "";
    private bool isSaving = false;
    private int? showingKeyId = null;
    private int? deletingKeyId = null;
    private string errorMessage = "";
    private string successMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadApiKeys();
    }

    private async Task LoadApiKeys()
    {
        try
        {
            // For now, just load the single OpenRouter key if it exists
            var result = await AutoHostClient.AuthGetApiKeyAsync();
            apiKeys.Clear();

            if (!string.IsNullOrEmpty(result.ApiKey))
            {
                apiKeys.Add(new ApiKeyInfo
                {
                    Id = 1,
                    Service = "OpenRouter",
                    Description = result.Description ?? "API Key",
                    Value = result.ApiKey,
                    CreatedAt = DateTime.Now, // Would need to get from API
                    LastUsedAt = null
                });
            }
        }
        catch
        {
            // Ignore errors loading keys
        }
    }

    private void ShowAddKey()
    {
        isAddingKey = true;
        newKeyService = "OpenRouter";
        newKeyDescription = "";
        newKeyValue = "";
        errorMessage = "";
        successMessage = "";
    }

    private void CancelAddKey()
    {
        isAddingKey = false;
        newKeyValue = "";
    }

    private async Task SaveNewKey()
    {
        isSaving = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            // For now, we only support one key through the API
            await AutoHostClient.AuthSaveApiKeyAsync(new SaveApiKeyRequest
            {
                ApiKey = newKeyValue,
                Description = string.IsNullOrWhiteSpace(newKeyDescription) ? newKeyService : newKeyDescription
            });

            successMessage = "API key saved successfully.";
            isAddingKey = false;
            newKeyValue = "";
            await LoadApiKeys();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to save API key.";
        }
        finally
        {
            isSaving = false;
        }
    }

    private void ToggleShowKey(int keyId)
    {
        showingKeyId = showingKeyId == keyId ? null : keyId;
    }

    private async Task DeleteKey(int keyId)
    {
        deletingKeyId = keyId;
        errorMessage = "";
        successMessage = "";

        try
        {
            // Delete by saving empty key
            await AutoHostClient.AuthSaveApiKeyAsync(new SaveApiKeyRequest
            {
                ApiKey = "",
                Description = ""
            });

            successMessage = "API key deleted successfully.";
            await LoadApiKeys();
        }
        catch
        {
            errorMessage = "Failed to delete API key.";
        }
        finally
        {
            deletingKeyId = null;
        }
    }

    private string GetRelativeTime(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;

        if (timeSpan.TotalMinutes < 1)
            return "just now";
        if (timeSpan.TotalHours < 1)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalDays < 1)
            return $"{(int)timeSpan.TotalHours}h ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays}d ago";

        return dateTime.ToString("MMM d");
    }
}