@page "/test"
@using AutoWeb.Components
@using AutoWeb.Pages
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@inject NavigationManager Navigation
@inject IWebAssemblyHostEnvironment HostEnvironment

<PageTitle>Component Test Harness</PageTitle>

@if (AutomatedTest)
{
    <!-- Automated testing: render ONLY the component -->
    @if (ComponentName == "AuthenticationSettings")
    {
        <AuthenticationSettings />
    }
    else if (ComponentName == "Auth")
    {
        <Auth />
    }
    else
    {
        <div class="text-red-500 p-4">Unknown component: @ComponentName</div>
    }
}
else
{
    <!-- Manual testing: render with state selector UI -->
    <div class="min-h-screen bg-gray-900 text-gray-100 p-4">
        <div class="max-w-6xl mx-auto">
            <h1 class="text-2xl font-bold mb-4">@ComponentName Test Harness</h1>

            <div class="mb-4 bg-gray-800 rounded p-3">
                <label class="mr-2">Test State:</label>
                @foreach (var state in States)
                {
                    <button @onclick="() => ChangeState(state)"
                            class="px-3 py-1 mr-2 rounded @(CurrentState == state ? "bg-blue-600" : "bg-gray-700")">
                        @state
                    </button>
                }
            </div>

            <div class="border-2 border-dashed border-gray-600 rounded p-4">
                @if (ComponentName == "AuthenticationSettings")
                {
                    <AuthenticationSettings />
                }
                else if (ComponentName == "Auth")
                {
                    <Auth />
                }
                else
                {
                    <div class="text-red-500 p-4">Unknown component: @ComponentName</div>
                }
            </div>
        </div>
    </div>
}

@code {
    private string ComponentName = "AuthenticationSettings";
    private string CurrentState = "password-only";
    private bool AutomatedTest = false;
    private string[] States = Array.Empty<string>();

    protected override void OnInitialized()
    {
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        // Get component name from query string, default to AuthenticationSettings for backward compatibility
        ComponentName = query["component"] ?? "AuthenticationSettings";

        // Get valid states for this component from central registry
        States = AutoWeb.Tests.MockStates.GetStatesForComponent(ComponentName);

        // Get current state, default to first state for the component
        CurrentState = query["state"] ?? (States.Length > 0 ? States[0] : "");
        AutomatedTest = query["automated"] == "true";
    }

    private void ChangeState(string state)
    {
        Navigation.NavigateTo($"/test?component={ComponentName}&state={state}", forceLoad: true);
    }
}