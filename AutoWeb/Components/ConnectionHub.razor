@using AutoWeb.Client

<div class="bg-gray-800 rounded-lg p-6">
    <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-semibold text-white">Connection Hub</h3>
        <button @onclick="ShowAddConnection"
                class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-500 transition-colors font-medium">
            + Add Connection
        </button>
    </div>

    @if (isAddingConnection)
    {
        <div class="bg-gray-700 p-4 rounded-lg mb-4">
            <div class="space-y-3">
                <div>
                    <label class="block text-sm font-medium text-gray-300 mb-1">Service</label>
                    <select @onchange="OnServiceChanged"
                            value="@selectedService"
                            class="w-full p-2 bg-gray-600 text-white rounded border border-gray-500 focus:border-green-400 focus:outline-none">
                        @foreach (var service in availableServices)
                        {
                            <option value="@service.Type">@service.DisplayName</option>
                        }
                    </select>
                    <p class="text-xs text-gray-400 mt-1">
                        @availableServices.FirstOrDefault(s => s.Type == selectedService)?.Description
                    </p>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-300 mb-1">Protocol</label>
                    <select @onchange="OnProtocolChanged"
                            value="@selectedProtocol"
                            class="w-full p-2 bg-gray-600 text-white rounded border border-gray-500 focus:border-green-400 focus:outline-none">
                        @foreach (var protocol in GetSupportedProtocols(selectedService))
                        {
                            <option value="@protocol">@GetProtocolDisplayName(protocol)</option>
                        }
                    </select>
                    <p class="text-xs text-gray-400 mt-1">
                        @availableProtocols.FirstOrDefault(p => p.Type == selectedProtocol)?.Description
                    </p>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-300 mb-1">Description (Optional)</label>
                    <input @bind="newConnectionDescription"
                           placeholder="e.g., Production API Key"
                           class="w-full p-2 bg-gray-600 text-white rounded border border-gray-500 focus:border-green-400 focus:outline-none" />
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-300 mb-1">API Key</label>
                    <input @bind="newConnectionApiKey"
                           type="password"
                           placeholder="sk-..."
                           class="w-full p-2 bg-gray-600 text-white rounded border border-gray-500 focus:border-green-400 focus:outline-none" />
                </div>

                <div class="flex gap-2 mt-4">
                    <button @onclick="SaveNewConnection"
                            disabled="@(isSaving || string.IsNullOrWhiteSpace(newConnectionApiKey))"
                            class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-500 transition-colors disabled:bg-gray-500">
                        @(isSaving ? "Saving..." : "Save")
                    </button>
                    <button @onclick="CancelAddConnection"
                            class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-500 transition-colors">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    }

    @if (connections.Count == 0 && !isAddingConnection)
    {
        <div class="bg-gray-700 rounded-lg p-8 text-center">
            <div class="max-w-md mx-auto">
                <div class="text-4xl mb-4">ðŸ”Œ</div>
                <h4 class="text-xl font-semibold text-white mb-3">No Connections Yet</h4>
                <p class="text-gray-300 mb-2">
                    Connections let you securely integrate with AI services like OpenRouter, OpenAI, and Anthropic.
                </p>
                <p class="text-gray-400 text-sm mb-6">
                    Your API keys are encrypted and stored securely. You can manage multiple connections and switch between them easily.
                </p>
                <button @onclick="ShowAddConnection"
                        class="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-500 transition-colors font-medium inline-flex items-center gap-2">
                    <span>+</span> Add Your First Connection
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="space-y-2">
            @foreach (var connection in connections)
            {
                <div class="bg-gray-700 p-3 rounded flex justify-between items-center">
                    <div class="flex-1">
                        <div class="flex items-center gap-3">
                            <span class="text-white font-medium">@GetServiceDisplayName(connection.ServiceType)</span>
                            <span class="text-gray-500 text-xs">via @GetProtocolDisplayName(connection.Protocol)</span>
                            @if (!string.IsNullOrWhiteSpace(connection.Description))
                            {
                                <span class="text-gray-400 text-sm">â€¢ @connection.Description</span>
                            }
                        </div>
                        <div class="text-sm text-gray-400 mt-1">
                            Created @connection.CreatedAt.ToString("MMM d, yyyy")
                            @if (connection.LastUsedAt.HasValue)
                            {
                                <span> â€¢ Last used @GetRelativeTime(connection.LastUsedAt.Value.DateTime)</span>
                            }
                        </div>
                    </div>
                    <div class="flex items-center gap-2 ml-4">
                        @if (showingKeyId == connection.Id)
                        {
                            <div class="text-sm font-mono bg-gray-600 px-2 py-1 rounded">
                                @connection.Key
                            </div>
                        }
                        <button @onclick="() => ToggleShowKey(connection.Id)"
                                class="px-3 py-1.5 text-sm bg-gray-600 text-white rounded hover:bg-gray-500 transition-colors">
                            @(showingKeyId == connection.Id ? "Hide" : "Show")
                        </button>
                        <button @onclick="() => DeleteConnection(connection.Id)"
                                disabled="@(deletingKeyId == connection.Id)"
                                class="px-3 py-1.5 text-sm bg-red-600 text-white rounded hover:bg-red-500 transition-colors disabled:bg-gray-500">
                            @(deletingKeyId == connection.Id ? "Deleting..." : "Delete")
                        </button>
                    </div>
                </div>
            }
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="mt-4 p-3 bg-red-900 bg-opacity-50 border border-red-500 rounded">
            <p class="text-sm text-red-200">@errorMessage</p>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="mt-4 p-3 bg-green-900 bg-opacity-50 border border-green-500 rounded">
            <p class="text-sm text-green-200">@successMessage</p>
        </div>
    }
</div>
