@using AutoWeb.Client
@using AutoWeb.Services
@inject AutoWeb.Client.IAutoHostClient AutoHostClient
@inject PasskeyService PasskeyService
@inject IJSRuntime JS

<div class="space-y-4">

    <!-- Password Section -->
    <div class="bg-gray-800 rounded-lg p-6">
        <h3 class="text-lg font-semibold mb-4 text-white">
            Password Authentication
        </h3>

        @if (hasPassword)
        {
            <div class="bg-gray-700 p-4 rounded-lg">
                <p class="text-gray-300 mb-3">Password authentication is enabled for your account.</p>
                <button @onclick="RemovePassword"
                        disabled="@(passkeys.Count == 0 || isRemovingPassword)"
                        class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-500 transition-colors disabled:bg-gray-600 disabled:cursor-not-allowed">
                    @if (isRemovingPassword)
                    {
                        <span>Removing...</span>
                    }
                    else if (passkeys.Count == 0)
                    {
                        <span>Add passkey first</span>
                    }
                    else
                    {
                        <span>Remove Password</span>
                    }
                </button>
            </div>
        }
        else
        {
            <div class="bg-gray-700 p-4 rounded-lg">
                <p class="text-gray-300 mb-3">No password set. You're using passkey-only authentication.</p>
                <button @onclick="AddPassword"
                        class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-500 transition-colors">
                    Create Password
                </button>
            </div>
        }

        @if (showPasswordDialog)
        {
            <div class="bg-gray-700 p-4 rounded-lg mt-3">
                <h4 class="text-white font-medium mb-3">Create New Password</h4>
                <div class="space-y-3">
                    <div>
                        <label class="block text-sm text-gray-300 mb-1">Password</label>
                        <input type="password" @bind="newPassword" @bind:event="oninput"
                               class="w-full p-2 bg-gray-600 text-white rounded border border-gray-500 focus:border-green-400 focus:outline-none" />
                    </div>
                    <div>
                        <label class="block text-sm text-gray-300 mb-1">Confirm Password</label>
                        <input type="password" @bind="confirmNewPassword" @bind:event="oninput"
                               class="w-full p-2 bg-gray-600 text-white rounded border border-gray-500 focus:border-green-400 focus:outline-none" />
                    </div>
                    <div class="flex gap-2">
                        <button @onclick="SavePassword"
                                disabled="@(isAddingPassword || string.IsNullOrWhiteSpace(newPassword) || newPassword != confirmNewPassword)"
                                class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-500 transition-colors disabled:bg-gray-500">
                            @(isAddingPassword ? "Creating..." : "Create")
                        </button>
                        <button @onclick="CancelPasswordDialog"
                                class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-500 transition-colors">
                            Cancel
                        </button>
                    </div>
                    @if (newPassword != confirmNewPassword && !string.IsNullOrEmpty(confirmNewPassword))
                    {
                        <p class="text-sm text-red-400">Passwords don't match</p>
                    }
                </div>
            </div>
        }
    </div>

    <!-- Passkeys Section -->
    <div class="bg-gray-800 rounded-lg p-6">
        <h3 class="text-lg font-semibold mb-4 text-white">
            Passkeys
        </h3>

        @if (isLoadingPasskeys)
        {
            <div class="text-gray-400">Loading passkeys...</div>
        }
        else if (passkeys.Count == 0)
        {
            <div class="bg-gray-700 p-4 rounded-lg mb-4">
                <p class="text-gray-300">No passkeys registered yet.</p>
            </div>
        }
        else
        {
            <div class="space-y-2 mb-4">
                @foreach (var passkey in passkeys)
                {
                    <div class="bg-gray-700 p-3 rounded flex justify-between items-center">
                        <div class="flex-1">
                            <div class="text-white">@(passkey.DeviceName ?? "Unknown Device")</div>
                            <div class="text-sm text-gray-400 mt-1">
                                Created @passkey.CreatedAt.LocalDateTime.ToString("MMM d, yyyy")
                                @if (passkey.LastUsedAt.HasValue)
                                {
                                    <span> • Used @GetRelativeTime(passkey.LastUsedAt.Value)</span>
                                }
                            </div>
                        </div>
                        <button @onclick="() => DeletePasskey(passkey.Id)"
                                disabled="@(deletingPasskeyId == passkey.Id || (!hasPassword && passkeys.Count == 1))"
                                class="ml-4 px-3 py-1.5 text-sm bg-red-600 text-white rounded hover:bg-red-500 transition-colors disabled:bg-gray-600 disabled:text-gray-400 disabled:cursor-not-allowed">
                            @if (deletingPasskeyId == passkey.Id)
                            {
                                <span>Deleting...</span>
                            }
                            else if (!hasPassword && passkeys.Count == 1)
                            {
                                <span>Last one</span>
                            }
                            else
                            {
                                <span>Delete</span>
                            }
                        </button>
                    </div>
                }
            </div>
        }

        <button @onclick="AddPasskey"
                disabled="@(isAddingPasskey || !passkeySupported)"
                class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-500 transition-colors font-medium disabled:bg-gray-600 disabled:cursor-not-allowed">
            @if (isAddingPasskey)
            {
                <span>Adding Passkey...</span>
            }
            else if (!passkeySupported)
            {
                <span>Passkeys Not Supported</span>
            }
            else
            {
                <span>+ Add Passkey</span>
            }
        </button>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="mt-6 p-4 bg-gray-700 border border-red-500 rounded-lg">
            <div class="flex items-start">
                <span class="text-red-400 mr-2">⚠</span>
                <div class="text-white">@errorMessage</div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="mt-6 p-4 bg-gray-700 border border-green-500 rounded-lg">
            <div class="flex items-start">
                <span class="text-green-400 mr-2">✓</span>
                <div class="text-white">@successMessage</div>
            </div>
        </div>
    }
</div>

@code {
    private List<AutoWeb.Client.PasskeyInfo> passkeys = new();
    private bool isLoadingPasskeys = true;
    private bool isAddingPasskey = false;
    private int? deletingPasskeyId = null;
    private bool passkeySupported = false;
    private bool hasPassword = true;
    private bool isRemovingPassword = false;
    private bool isAddingPassword = false;
    private bool showPasswordDialog = false;
    private string newPassword = "";
    private string confirmNewPassword = "";
    private string errorMessage = "";
    private AutoWeb.Client.AuthErrorCode? errorCode = null;
    private string successMessage = "";
    private string? userEmail = null;

    protected override async Task OnInitializedAsync()
    {
        passkeySupported = await PasskeyService.IsSupported();
        userEmail = await JS.InvokeAsync<string?>("sessionStorage.getItem", "userEmail");
        await LoadAuthenticationMethods();
    }

    private async Task LoadAuthenticationMethods()
    {
        isLoadingPasskeys = true;
        errorMessage = "";
        errorCode = null;

        try
        {
            // Load passkeys
            var passkeyResponse = await AutoHostClient.PasskeyListAsync();
            passkeys = passkeyResponse.Passkeys.ToList();

            // Check if user has password
            if (!string.IsNullOrEmpty(userEmail))
            {
                var checkResponse = await AutoHostClient.PasskeyCheckUserAsync(new CheckUserRequest { Username = userEmail });
                Console.WriteLine($"[AuthSettings] CheckUser response: Has Password={checkResponse.HasPassword}, Has Passkeys={checkResponse.HasPasskeys}");
                hasPassword = checkResponse.HasPassword;
                Console.WriteLine($"[AuthSettings] Set hasPassword={hasPassword}, passkeys.Count={passkeys.Count}");
            }
        }
        catch (ApiException<ErrorResponse> ex)
        {
            errorMessage = ex.Result?.Error ??"Failed to load authentication methods";
            errorCode = ex.Result?.ErrorCode;
        }
        catch (Exception)
        {
            errorMessage = "Failed to load authentication methods";
            errorCode = null;
        }
        finally
        {
            isLoadingPasskeys = false;
        }
    }

    private async Task AddPasskey()
    {
        isAddingPasskey = true;
        errorMessage = "";
        errorCode = null;
        successMessage = "";

        try
        {
            // Get challenge from server
            var challengeResponse = await AutoHostClient.PasskeyChallengeAsync();

            // Create passkey via WebAuthn
            var passkeyData = await JS.InvokeAsync<dynamic?>(
                "PasskeySupport.createPasskey",
                userEmail,
                challengeResponse.Challenge,
                "localhost");

            if (passkeyData != null)
            {
                var request = new RegisterPasskeyRequest
                {
                    CredentialId = passkeyData.CredentialId,
                    AttestationObject = passkeyData.AttestationObject,
                    ClientDataJson = passkeyData.ClientDataJSON,
                    DeviceName = "Browser Passkey"
                };

                var result = await AutoHostClient.PasskeyEnrollAsync(request);

                if (result.Success)
                {
                    successMessage = "Passkey added successfully!";
                    await LoadAuthenticationMethods();
                }
            }
        }
        catch (Exception ex)
        {
            var isCancelled = ex.Message.Contains("User denied", StringComparison.OrdinalIgnoreCase) ||
                             ex.Message.Contains("canceled", StringComparison.OrdinalIgnoreCase);
            errorMessage = isCancelled ? "Passkey creation was cancelled." : "Failed to add passkey.";
            errorCode = isCancelled ? AutoWeb.Client.AuthErrorCode.AuthenticationCancelled : null;
        }
        finally
        {
            isAddingPasskey = false;
        }
    }

    private async Task DeletePasskey(int passkeyId)
    {
        deletingPasskeyId = passkeyId;
        errorMessage = "";
        errorCode = null;
        successMessage = "";

        try
        {
            var response = await AutoHostClient.PasskeyDeleteAsync(passkeyId);
            if (response.Success)
            {
                successMessage = "Passkey removed successfully.";
                await LoadAuthenticationMethods();
            }
        }
        catch (ApiException<ErrorResponse> ex)
        {
            errorMessage = ex.Result?.Error ?? "Failed to remove passkey";
            errorCode = ex.Result?.ErrorCode;
        }
        catch (Exception)
        {
            errorMessage = "Failed to remove passkey.";
            errorCode = null;
        }
        finally
        {
            deletingPasskeyId = null;
        }
    }

    private async Task RemovePassword()
    {
        isRemovingPassword = true;
        errorMessage = "";
        errorCode = null;
        successMessage = "";

        try
        {
            var response = await AutoHostClient.AuthRemovePasswordAsync();
            if (response.Success)
            {
                successMessage = response.Message;
                await LoadAuthenticationMethods();
            }
        }
        catch (ApiException<ErrorResponse> ex)
        {
            errorMessage = ex.Result?.Error ?? "Failed to remove password";
            errorCode = ex.Result?.ErrorCode;
        }
        catch (Exception)
        {
            errorMessage = "Failed to remove password";
            errorCode = null;
        }
        finally
        {
            isRemovingPassword = false;
        }
    }

    private void AddPassword()
    {
        showPasswordDialog = true;
        newPassword = "";
        confirmNewPassword = "";
        errorMessage = "";
        errorCode = null;
    }

    private async Task SavePassword()
    {
        isAddingPassword = true;
        errorMessage = "";
        errorCode = null;
        successMessage = "";

        try
        {
            var response = await AutoHostClient.AuthCreatePasswordAsync(new CreatePasswordRequest
            {
                Password = newPassword
            });

            if (response.Success)
            {
                successMessage = response.Message;
                showPasswordDialog = false;
                newPassword = "";
                confirmNewPassword = "";
                await LoadAuthenticationMethods();
            }
        }
        catch (ApiException<ErrorResponse> ex)
        {
            errorMessage = ex.Result?.Error ?? "Failed to create password";
            errorCode = ex.Result?.ErrorCode;
        }
        catch (Exception)
        {
            errorMessage = "Failed to create password";
            errorCode = null;
        }
        finally
        {
            isAddingPassword = false;
        }
    }

    private void CancelPasswordDialog()
    {
        showPasswordDialog = false;
        newPassword = "";
        confirmNewPassword = "";
        errorMessage = "";
        errorCode = null;
    }

    private string GetRelativeTime(DateTimeOffset dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime;

        if (timeSpan.TotalMinutes < 1)
            return "just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes} minutes ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours} hours ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays} days ago";

        return dateTime.ToLocalTime().ToString("MMM d, yyyy");
    }
}